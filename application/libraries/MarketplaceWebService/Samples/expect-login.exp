#!/usr/bin/expect -f
set timeout -1

#example of getting arguments passed from command line..
#not necessarily the best practice for passwords though...
set server [lindex $argv 0]
set user [lindex $argv 1]
set pass [lindex $argv 2]
set devname [lindex $argv 3]
set appname [lindex $argv 4]
set certname [lindex $argv 5]
set tokenname [lindex $argv 6]
set acname [lindex $argv 7]
# connect to server via ssh, login, and su to root
send_user "connecting to $server\n"
spawn ssh  $user@$server -o ServerAliveInterval=30 

#login handles cases:
#   login with keys (no user/pass)
#   user/pass
#   login with keys (first time verification)
expect {
  "> " { }
  "$ " { }
  "# " { }
  "assword: " {
    send "$pass\n"
      expect {
        "> " { }
        "$ " { }
        "# " { }
      }
  }
  "(yes/no)? " {
    send "yes\n"
      expect {
        "> " { }
        "$ " { }
        "# " { }
      }
  }
  default {
    send_user "Login failed\n"
      exit
  }
}

#example command
send "reset\n"
send "export TERM=xterm-color\n"
send "./test.sh $devname $appname $certname $tokenname $acname\n"
#send  "cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys2\n"

interact
expect eof
expect {
  "> " {}
  "# " {}
  default {}
}
#login out
send "exit\n"

expect {
  "> " {}
  "# " {}
  default {}
}

send_user "finished\n"
